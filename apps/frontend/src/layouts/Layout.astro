---
interface Props {
  title?: string;
}

import Header from '@/components/layout/Header.astro';
import '../styles/global.css';
import { AuthProvider } from '@/context/AuthContext';

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>ohio {title} ;;</title>
  </head>
  <body class="overflow-y-auto scrollbar-hidden">
    <Header />
    <slot />
    <div
      class="hidden absolute top-0 left-5 w-px h-[calc(100%_+_30px)] bg-border pointer-events-none lg:block lg:left-16 xl:left-16"
    >
    </div>
    <div
      class="hidden absolute top-0 right-5 w-px h-[calc(100%_+_30px)] bg-border pointer-events-none lg:block lg:right-14 xl:right-14"
    >
    </div>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
</script>
